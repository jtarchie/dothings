// Code generated by counterfeiter. DO NOT EDIT.
package stepsfakes

import (
	"sync"

	"github.com/jtarchie/dothings/examples/pipeline/models"
	"github.com/jtarchie/dothings/examples/pipeline/steps/managers"
)

type FakeVersionManager struct {
	GetLatestVersionStub        func(*models.Resource) managers.Version
	getLatestVersionMutex       sync.RWMutex
	getLatestVersionArgsForCall []struct {
		arg1 *models.Resource
	}
	getLatestVersionReturns struct {
		result1 managers.Version
	}
	getLatestVersionReturnsOnCall map[int]struct {
		result1 managers.Version
	}
	SetLatestVersionStub        func(*models.Resource, managers.Version)
	setLatestVersionMutex       sync.RWMutex
	setLatestVersionArgsForCall []struct {
		arg1 *models.Resource
		arg2 managers.Version
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVersionManager) GetLatestVersion(arg1 *models.Resource) managers.Version {
	fake.getLatestVersionMutex.Lock()
	ret, specificReturn := fake.getLatestVersionReturnsOnCall[len(fake.getLatestVersionArgsForCall)]
	fake.getLatestVersionArgsForCall = append(fake.getLatestVersionArgsForCall, struct {
		arg1 *models.Resource
	}{arg1})
	fake.recordInvocation("GetLatestVersion", []interface{}{arg1})
	fake.getLatestVersionMutex.Unlock()
	if fake.GetLatestVersionStub != nil {
		return fake.GetLatestVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getLatestVersionReturns
	return fakeReturns.result1
}

func (fake *FakeVersionManager) GetLatestVersionCallCount() int {
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	return len(fake.getLatestVersionArgsForCall)
}

func (fake *FakeVersionManager) GetLatestVersionCalls(stub func(*models.Resource) managers.Version) {
	fake.getLatestVersionMutex.Lock()
	defer fake.getLatestVersionMutex.Unlock()
	fake.GetLatestVersionStub = stub
}

func (fake *FakeVersionManager) GetLatestVersionArgsForCall(i int) *models.Resource {
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	argsForCall := fake.getLatestVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVersionManager) GetLatestVersionReturns(result1 managers.Version) {
	fake.getLatestVersionMutex.Lock()
	defer fake.getLatestVersionMutex.Unlock()
	fake.GetLatestVersionStub = nil
	fake.getLatestVersionReturns = struct {
		result1 managers.Version
	}{result1}
}

func (fake *FakeVersionManager) GetLatestVersionReturnsOnCall(i int, result1 managers.Version) {
	fake.getLatestVersionMutex.Lock()
	defer fake.getLatestVersionMutex.Unlock()
	fake.GetLatestVersionStub = nil
	if fake.getLatestVersionReturnsOnCall == nil {
		fake.getLatestVersionReturnsOnCall = make(map[int]struct {
			result1 managers.Version
		})
	}
	fake.getLatestVersionReturnsOnCall[i] = struct {
		result1 managers.Version
	}{result1}
}

func (fake *FakeVersionManager) SetLatestVersion(arg1 *models.Resource, arg2 managers.Version) {
	fake.setLatestVersionMutex.Lock()
	fake.setLatestVersionArgsForCall = append(fake.setLatestVersionArgsForCall, struct {
		arg1 *models.Resource
		arg2 managers.Version
	}{arg1, arg2})
	fake.recordInvocation("SetLatestVersion", []interface{}{arg1, arg2})
	fake.setLatestVersionMutex.Unlock()
	if fake.SetLatestVersionStub != nil {
		fake.SetLatestVersionStub(arg1, arg2)
	}
}

func (fake *FakeVersionManager) SetLatestVersionCallCount() int {
	fake.setLatestVersionMutex.RLock()
	defer fake.setLatestVersionMutex.RUnlock()
	return len(fake.setLatestVersionArgsForCall)
}

func (fake *FakeVersionManager) SetLatestVersionCalls(stub func(*models.Resource, managers.Version)) {
	fake.setLatestVersionMutex.Lock()
	defer fake.setLatestVersionMutex.Unlock()
	fake.SetLatestVersionStub = stub
}

func (fake *FakeVersionManager) SetLatestVersionArgsForCall(i int) (*models.Resource, managers.Version) {
	fake.setLatestVersionMutex.RLock()
	defer fake.setLatestVersionMutex.RUnlock()
	argsForCall := fake.setLatestVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVersionManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	fake.setLatestVersionMutex.RLock()
	defer fake.setLatestVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVersionManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
